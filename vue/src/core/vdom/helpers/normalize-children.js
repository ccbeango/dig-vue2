/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// 标准化VNode节点成一维数组 保证数据结构为 Array<VNode>

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// simpleNormalizeChildren方法调用场景是：
//    render函数是编译生成的。理论上编译生成的 children 都已经是 VNode 类型的
//    但这里有一个例外，就是functional component函数式组件返回的
//    是一个数组而不是一个根节点，所以会通过Array.prototype.concat方法
//    把整个 children 数组打平，让它的深度只有一层

// 简单标准化Children children中可能存在二维数组，全部打平为一维数组
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
// normalizeChildren方法的调用场景有 2 种：
//    一个场景是 render 函数是用户手写的，当 children 只有一个节点的时候，
//    Vue.js 从接口层面允许用户把children写成基础类型用来创建单个简单的文本节点，
//    这种情况会调用 createTextVNode 创建一个文本节点的 VNode；
//    另一个场景是当编译 slot、v-for 的时候会产生嵌套数组的情况，
//    会调用 normalizeArrayChildren 方法
// 标准化Children 包含一些特殊的vue标签语法等 或手写render函数JSX语法
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    // 原始JS类型，创建文本VNode节点
    ? [createTextVNode(children)]
    // 数组
    : Array.isArray(children)
      // 标准化数组Children
      ? normalizeArrayChildren(children)
      // 非原始JS类型且非数组
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

// 标准化数组Children 打平Children成一维数组
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    // 跳过undefined boolean的元素
    if (isUndef(c) || typeof c === 'boolean') continue

    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested
    if (Array.isArray(c)) { // 节点还是数组 v-for中很常见
      if (c.length > 0) {
        // 递归调用
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 合并相邻文本节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) { // 节点是原生类型
      if (isTextNode(last)) {
        // 合并文本节点
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        // 创建文本VNode节点
        res.push(createTextVNode(c))
      }
    } else { // 节点已经是VNode类型
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        // 合并文本节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 遍历的children节点如果没有设置:key 但定义了 nestedIndex 就生成key
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
